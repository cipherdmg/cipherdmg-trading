//@version=5

// ||###################################################################################||
// ||                                                                                   ||
// || Cipher DMG                                                                        ||
// || The Strat TimeFrames Performance Monitor Sectors                                  ||
// ||                                                                                   ||
// ||                                                                                   ||
// ||###################################################################################||

indicator(title="The Strat TimeFrames Sectors", shorttitle="The Strat TimeFrames Sectors", max_labels_count = 500, overlay=false)

LIGHTTRANSP = 90
AVGTRANSP = 80
HEAVYTRANSP = 70

var string _gp2 = 'Display'
emptyTopTableRow = input.bool(true, title='Insert a blank table row at the top to gain more space', group=_gp2)
bullishColor = input.color(color.new(color.green, 0), title='Bullish Color', group=_gp2)
bearishColor = input.color(color.new(color.red, 0), title='Bearish Color', group=_gp2)
tfTableOpacity = input.int(80, title='Multi time frame table opacity', group=_gp2)


//##################################################################################################
//Ticker Details
//SPY, QQQ, VXX, SHM, IWM
//XLK, XLE, XOP, XLF, XBI, XHB, XLB, XLC, XLI, XLP, XLRE, XLU, XLY, XLV, XRT
//##################################################################################################
var string _gp3 = 'Symbols'
//symbol1 = input.symbol('SPY', group=_gp3)
symbol1 = input.string('SPY', group=_gp3)
symbol2 = input.string('QQQ', group=_gp3)
symbol3 = input.string('VXX', group=_gp3)
symbol4 = input.string('SMH', group=_gp3)
symbol5 = input.string('IWM', group=_gp3)

//##################################################################################################
//Candle Type
//##################################################################################################
getCandleType(_high, _high1, _low, _low1) =>
    candleType = 0

    //Higher High and Lower Low
    if _high > _high1 and _low < _low1
        candleType := 3
        candleType

    else if _high <= _high1 and _low >= _low1
        //Lower High and Higher Low
        if _high <= _high1 and _low >= _low1
            candleType := 1
            candleType
        else
            candleType := 2
            candleType
    candleType



// @function Entire Candle wick to wick is inside the previous candle.  This is considered a Scenario 1.
// It means its consolidation on a smaller timeframe  We do not want to trade things on a 1 because it has Not picked its direction.
// @param idx index to use
// @returns
isInsideCandle(int idx) =>
    high[idx] <= high[idx + 1] and low[idx] >= low[idx + 1]

//@function Candle engulfs the previous candle and is typically the larges bar.  This is considered a Scenario 3
//Most commonly 3s occur after 1
//@return
isOutsideCandle(int idx) =>
    high[idx] > high[idx + 1] and low[idx] < low[idx + 1]


//getPercentChange
getPercentChange(openPrice,closePrice) =>

    //The Percent Change will be the closePrice - openPrice / (max (openPrice, closePrice))
    percentChange = ((closePrice - openPrice) / (math.max(openPrice,closePrice)) ) * 100.0
    resultColor = openPrice >= closePrice ? bearishColor : bullishColor
    [percentChange,resultColor]

// FULL TIME FRAME CONTINUITY CODE:
//reusable function for getting detail on the security
getSecurityByTimeFrame(symbol,timeFrame) =>
    [openValue, closeValue, highValue, lowValue, timeValue] = request.security(symbol = symbol, timeframe = timeFrame, expression = [open, close, high, low, time], gaps = barmerge.gaps_off)

    [percentChange,resultColor] = getPercentChange(openValue,closeValue)
    [openValue, closeValue, highValue, lowValue, timeValue, percentChange, resultColor]


addTableRow(tcTable,symbol, row) =>


    [openValue_15, closeValue_15, highValue_15, lowValue_15, timeValue_15, percentChange_15, resultColor_15] = getSecurityByTimeFrame(symbol,'15')
    [openValue_30, closeValue_30, highValue_30, lowValue_30, timeValue_30, percentChange_30, resultColor_30] = getSecurityByTimeFrame(symbol,'30')
    [openValue_60, closeValue_60, highValue_60, lowValue_60, timeValue_60, percentChange_60, resultColor_60] = getSecurityByTimeFrame(symbol,'60')
    [openValue_1D, closeValue_1D, highValue_1D, lowValue_1D, timeValue_1D, percentChange_1D, resultColor_1D] = getSecurityByTimeFrame(symbol,'1D')
    [openValue_1W, closeValue_1W, highValue_1W, lowValue_1W, timeValue_1W, percentChange_1W, resultColor_1W] = getSecurityByTimeFrame(symbol,'1W')
    [openValue_1M, closeValue_1M, highValue_1M, lowValue_1M, timeValue_1M, percentChange_1M, resultColor_1M] = getSecurityByTimeFrame(symbol,'1M')
    [openValue_3M, closeValue_3M, highValue_3M, lowValue_3M, timeValue_3M, percentChange_3M, resultColor_3M] = getSecurityByTimeFrame(symbol,'3M')


    table.cell(table_id = tcTable, column = 0, row = row, text = symbol, bgcolor=color.new(resultColor_1D, tfTableOpacity), text_color=resultColor_1D, text_size=size.auto, width=0)
    table.cell(table_id = tcTable, column = 1, row = row, text = '15' + '\n' + str.tostring(percentChange_15, '#.##') + '%', bgcolor=color.new(resultColor_15, tfTableOpacity), text_color=resultColor_15, text_size=size.auto, width=0)
    table.cell(table_id = tcTable, column = 2, row = row, text = '30' + '\n' + str.tostring(percentChange_30, '#.##') + '%', bgcolor=color.new(resultColor_30, tfTableOpacity), text_color=resultColor_30, text_size=size.auto, width=0)
    table.cell(table_id = tcTable, column = 3, row = row, text = '60' + '\n' + str.tostring(percentChange_60, '#.##') + '%', bgcolor=color.new(resultColor_60, tfTableOpacity), text_color=resultColor_60, text_size=size.auto, width=0)
    table.cell(table_id = tcTable, column = 4, row = row, text = 'D' + '\n' + str.tostring(percentChange_1D, '#.##') + '%', bgcolor=color.new(resultColor_1D, tfTableOpacity), text_color=resultColor_1D, text_size=size.auto, width=0)
    table.cell(table_id = tcTable, column = 5, row = row, text = 'W' + '\n' + str.tostring(percentChange_1W, '#.##') + '%', bgcolor=color.new(resultColor_1W, tfTableOpacity), text_color=resultColor_1W, text_size=size.auto, width=0)
    table.cell(table_id = tcTable, column = 6, row = row, text = 'M' + '\n' + str.tostring(percentChange_1M, '#.##') + '%', bgcolor=color.new(resultColor_1M, tfTableOpacity), text_color=resultColor_1M, text_size=size.auto, width=0)
    table.cell(table_id = tcTable, column = 7, row = row, text = '3M' + '\n' + str.tostring(percentChange_3M, '#.##') + '%', bgcolor=color.new(resultColor_3M, tfTableOpacity), text_color=resultColor_3M, text_size=size.auto, width=0)

//##################################################################################################
//Ticker Details
//SPY, QQQ, VXX, SHM, IWM
//XLK, XLE, XOP, XLF, XBI, XHB, XLB, XLC, XLI, XLP, XLRE, XLU, XLY, XLV, XRT
//##################################################################################################

// do not show timeframes that are less than the time frame selected (it will be inaccurate)
if barstate.islast
    var table tcTable = table.new(position=position.top_right, columns = 9, rows = 6, border_width=3)

    // table.cell(table_id = tcTable, column = 0, row = 0, text = '')
    // table.cell(table_id = tcTable, column = 1, row = 0, text = '')
    // table.cell(table_id = tcTable, column = 2, row = 0, text = '')
    // table.cell(table_id = tcTable, column = 3, row = 0, text = '')
    // table.cell(table_id = tcTable, column = 4, row = 0, text = '')
    // table.cell(table_id = tcTable, column = 5, row = 0, text = '')
    // table.cell(table_id = tcTable, column = 6, row = 0, text = '')
    // table.cell(table_id = tcTable, column = 7, row = 0, text = '')

    addTableRow(tcTable,symbol1,1)
    addTableRow(tcTable,symbol2,2)
    addTableRow(tcTable,symbol3,3)
    addTableRow(tcTable,symbol4,4)
    addTableRow(tcTable,symbol5,5)

    //ARKK, ARKQ, ARKX, ARKF, ARKG, ARKW, CTRU, PRNT
