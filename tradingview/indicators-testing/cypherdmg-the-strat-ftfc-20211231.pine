//@version=5
// ||###################################################################################||
// ||                                                                                   ||
// || https://www.tradingview.com/script/tjTzU6NR-Strat-FTFC-Vip3rr-AutoSizing/
// ||                                                                                   ||
// ||                                                                                   ||
// ||###################################################################################||


//@version=5

indicator(title='The Strat FTFC', shorttitle='The Strat FTFC', overlay=true)

bullishColor = input.color(color.green, title='Bullish color', group='Colors')
bearishColor = input.color(color.red, title='Bearish color', group='Colors')
insideColor = input.color(color.yellow, title='Bearish color', group='Colors')
tfTableOpacity = input.int(80, title='Multi time frame table opacity', group='Colors')
isTfEnabled = input.bool(true, title='Enabled', group='Time frame continuation')
usePreviousClose = input.bool(false, title='Use previous close', group='Time frame continuation')
tf1 = input.timeframe('60', title='Time Frame 1', group='Time frame continuation')
tf2 = input.timeframe('D', title='Time Frame 2', group='Time frame continuation')
tf3 = input.timeframe('W', title='Time Frame 3', group='Time frame continuation')
tf4 = input.timeframe('1M', title='Time Frame 4', group='Time frame continuation')
tf5 = input.timeframe('3M', title='Time Frame 4', group='Time frame continuation')

cdayhigh = request.security(syminfo.tickerid, 'D', high)
cdaylow = request.security(syminfo.tickerid, 'D', low)
dAtr = request.security(syminfo.tickerid, 'D', ta.atr(14), lookahead=barmerge.lookahead_on)

var table tcTable = table.new(position.top_right, 7, 2, border_width=3)

[tf1PrevClose, tf1Close] = request.security(syminfo.tickerid, tf1, [usePreviousClose ? close[1] : open[0], close[0]], barmerge.gaps_off)
[tf2PrevClose, tf2Close] = request.security(syminfo.tickerid, tf2, [usePreviousClose ? close[1] : open[0], close[0]], barmerge.gaps_off)
[tf3PrevClose, tf3Close] = request.security(syminfo.tickerid, tf3, [usePreviousClose ? close[1] : open[0], close[0]], barmerge.gaps_off)
[tf4PrevClose, tf4Close] = request.security(syminfo.tickerid, tf4, [usePreviousClose ? close[1] : open[0], close[0]], barmerge.gaps_off)
[tf5PrevClose, tf5Close] = request.security(syminfo.tickerid, tf5, [usePreviousClose ? close[1] : open[0], close[0]], barmerge.gaps_off)

h = high
l = low
c = close
o = open

onebar = h <= h[1] and l >= l[1]
twobar = h <= h[1] and l < l[1] or h > h[1] and l >= l[1]
threebar = h > h[1] and l < l[1]
greenbar = o <= c
red = o >= c



if barstate.islast and isTfEnabled
    tf1Bullish = tf1Close > tf1PrevClose
    tf2Bullish = tf2Close > tf2PrevClose
    tf3Bullish = tf3Close > tf3PrevClose
    tf4Bullish = tf4Close > tf4PrevClose
	tf5Bullish = tf5Close > tf5PrevClose

    tf1Chg = (tf1Close - tf1PrevClose) / tf1PrevClose * 100.0
    tf1Color = tf1Bullish ? bullishColor : bearishColor

    tf2Chg = (tf2Close - tf2PrevClose) / tf2PrevClose * 100.0
    tf2Color = tf2Bullish ? bullishColor : bearishColor

    tf3Chg = (tf3Close - tf3PrevClose) / tf3PrevClose * 100.0
    tf3Color = tf3Bullish ? bullishColor : bearishColor

    tf4Chg = (tf4Close - tf4PrevClose) / tf4PrevClose * 100.0
    tf4Color = tf4Bullish ? bullishColor : bearishColor

	tf5Chg = (tf5Close - tf5PrevClose) / tf5PrevClose * 100.0
    tf5Color = tf5Bullish ? bullishColor : bearishColor

    table.cell(tcTable, 0, 0, tf1 + '\n' + str.tostring(tf1Chg, '#.##') + '%', bgcolor=color.new(tf1Color, tfTableOpacity), text_color=tf1Color, text_size=size.auto, width=0)
    table.cell(tcTable, 1, 0, tf2 + '\n' + str.tostring(tf2Chg, '#.##') + '%', bgcolor=color.new(tf2Color, tfTableOpacity), text_color=tf2Color, text_size=size.auto, width=0)
    table.cell(tcTable, 2, 0, tf3 + '\n' + str.tostring(tf3Chg, '#.##') + '%', bgcolor=color.new(tf3Color, tfTableOpacity), text_color=tf3Color, text_size=size.auto, width=0)
    table.cell(tcTable, 3, 0, tf4 + '\n' + str.tostring(tf4Chg, '#.##') + '%', bgcolor=color.new(tf4Color, tfTableOpacity), text_color=tf4Color, text_size=size.auto, width=0)
	table.cell(tcTable, 4, 0, tf5 + '\n' + str.tostring(tf5Chg, '#.##') + '%', bgcolor=color.new(tf5Color, tfTableOpacity), text_color=tf5Color, text_size=size.auto, width=0)
    table.cell(tcTable, 5, 0, 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(color.gray, tfTableOpacity), text_color=color.white, text_size=size.auto, width=0)
    table.cell(tcTable, 6, 0, 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(color.gray, tfTableOpacity), text_color=color.white, text_size=size.auto, width=0)

