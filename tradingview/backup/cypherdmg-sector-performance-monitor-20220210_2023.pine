//@version=5

// ||###################################################################################||
// ||                                                                                   ||
// || Cipher DMG                                                                        ||
// || The Strat                                                                         ||
// ||     https://www.tradingview.com/script/0drMdHsO-TTM-Squeeze-Pro                   ||
// ||                                                                                   ||
// ||                                                                                   ||
// ||###################################################################################||

indicator(title="The Strat Sector Performance", shorttitle="The Strat Sector Performance", max_labels_count = 500, overlay=true)

LIGHTTRANSP = 90
AVGTRANSP = 80
HEAVYTRANSP = 70

var string _gp1 = 'Time Interval'
string i_time_interval = input.string('1D', '', inline='11', options=['1', '5', '15', '30', '60', '1D', '1W', '1M', '3M', '12M'], group=_gp1)

var string _gp2 = 'Display'
emptyTopTableRow = input.bool(true, title='Insert a blank table row at the top to gain more space', group=_gp2)
bullishColor = input.color(color.new(color.green, 0), title='Bullish Color', group=_gp2)
bearishColor = input.color(color.new(color.red, 0), title='Bearish Color', group=_gp2)
insideColor = input.color(color.new(color.white, 0), 'Inside Bar', inline='12', group=_gp2)
outsideColor = input.color(color.new(color.yellow, 0), 'Outside Bar', inline='12', group=_gp2)
tableYPositive = input.string('top', 'Panel position', inline='11', options=['top', 'middle', 'bottom'], group=_gp2)
tableXPositive = input.string('right', '', inline='11', options=['left', 'center', 'right'], group=_gp2)
indicatorTextSize = input.string('normal', 'Text Size', options=['tiny', 'small', 'normal', 'large', 'huge'], group=_gp2)
tfTableOpacity = input.int(80, title='Multi time frame table opacity', group=_gp2)


//XBI, XHB, XLB, XLC, XLE, XLF, XLI, XLK, XLP, XLRE, XLU, XLY, XLV, XRT, XOP, IBB, IYT, TLT, SMH
var string _gp3 = 'Symbols'
symbol1 = input.symbol('SPY', group=_gp3)
symbol2 = input.symbol('QQQ', group=_gp3)
symbol3 = input.symbol('VXX', group=_gp3)
symbol4 = input.symbol('SMH', group=_gp3)
symbol5 = input.symbol('XLK', group=_gp3)
symbol6 = input.symbol('XOP', group=_gp3)
symbol7 = input.symbol('XLE', group=_gp3)
symbol8 = input.symbol('XBI', group=_gp3)
symbol9 = input.symbol('XHB', group=_gp3)
symbol10 = input.symbol('XLC', group=_gp3)
symbol11 = input.symbol('XLF', group=_gp3)
symbol12 = input.symbol('XLI', group=_gp3)
symbol13 = input.symbol('XLP', group=_gp3)
symbol14 = input.symbol('XLRE', group=_gp3)
symbol15 = input.symbol('XLU', group=_gp3)
symbol16 = input.symbol('XLY', group=_gp3)
symbol17 = input.symbol('XLV', group=_gp3)
symbol18 = input.symbol('XRT', group=_gp3)
symbol19 = input.symbol('XLV', group=_gp3)
symbol20 = input.symbol('IBB', group=_gp3)
symbol21 = input.symbol('TLT', group=_gp3)


var table perfTable = table.new(position = tableYPositive + '_' + tableXPositive, columns=7, rows=12, border_width=3)

//##################################################################################################
//Candle Type
//##################################################################################################
getCandleType(_high, _high1, _low, _low1) =>
    candleType = 0

    //Higher High and Lower Low
    if _high > _high1 and _low < _low1
        candleType := 3
        candleType

    else if _high <= _high1 and _low >= _low1
        //Lower High and Higher Low
        if _high <= _high1 and _low >= _low1
            candleType := 1
            candleType
        else
            candleType := 2
            candleType
    candleType



// @function Entire Candle wick to wick is inside the previous candle.  This is considered a Scenario 1.
// It means its consolidation on a smaller timeframe  We do not want to trade things on a 1 because it has Not picked its direction.
// @param idx index to use
// @returns
isInsideCandle(int idx) =>
    high[idx] <= high[idx + 1] and low[idx] >= low[idx + 1]

//@function Candle engulfs the previous candle and is typically the larges bar.  This is considered a Scenario 3
//Most commonly 3s occur after 1
//@return
isOutsideCandle(int idx) =>
    high[idx] > high[idx + 1] and low[idx] < low[idx + 1]


//getPercentChange
getPercentChange(openPrice,closePrice) =>

    //The Percent Change will be the closePrice - openPrice / (max (openPrice, closePrice))
    percentChange = ((closePrice - openPrice) / (math.max(openPrice,closePrice)) ) * 100.0
    resultColor = openPrice >= closePrice ? bearishColor : bullishColor
    [percentChange,resultColor]

// FULL TIME FRAME CONTINUITY CODE:
//reusable function for getting detail on the security
getSecurityByTimeFrame(symbol,timeFrame) =>
    [openValue, closeValue, highValue, lowValue, timeValue] = request.security(symbol = symbol, timeframe = timeFrame, expression = [open, close, high, low, time], gaps = barmerge.gaps_off)

    [percentChange,resultColor] = getPercentChange(openValue,closeValue)
    [openValue, closeValue, highValue, lowValue, timeValue, percentChange, resultColor]


addTableRow(tcTable,symbol, row) =>


    [openValue_15, closeValue_15, highValue_15, lowValue_15, timeValue_15, percentChange_15, resultColor_15] = getSecurityByTimeFrame(symbol,'15')
    [openValue_30, closeValue_30, highValue_30, lowValue_30, timeValue_30, percentChange_30, resultColor_30] = getSecurityByTimeFrame(symbol,'30')
    [openValue_60, closeValue_60, highValue_60, lowValue_60, timeValue_60, percentChange_60, resultColor_60] = getSecurityByTimeFrame(symbol,'60')
    [openValue_1D, closeValue_1D, highValue_1D, lowValue_1D, timeValue_1D, percentChange_1D, resultColor_1D] = getSecurityByTimeFrame(symbol,'1D')
    [openValue_1W, closeValue_1W, highValue_1W, lowValue_1W, timeValue_1W, percentChange_1W, resultColor_1W] = getSecurityByTimeFrame(symbol,'1W')
    [openValue_1M, closeValue_1M, highValue_1M, lowValue_1M, timeValue_1M, percentChange_1M, resultColor_1M] = getSecurityByTimeFrame(symbol,'1M')
    [openValue_3M, closeValue_3M, highValue_3M, lowValue_3M, timeValue_3M, percentChange_3M, resultColor_3M] = getSecurityByTimeFrame(symbol,'3M')


    table.cell(table_id = tcTable, column = 0, row = row, text = symbol, bgcolor=color.new(resultColor_1D, tfTableOpacity), text_color=resultColor_1D, text_size=size.auto, width=0)
    table.cell(table_id = tcTable, column = 1, row = row, text = '15' + '\n' + str.tostring(percentChange_15, '#.##') + '%', bgcolor=color.new(resultColor_15, tfTableOpacity), text_color=resultColor_15, text_size=size.auto, width=0)
    table.cell(table_id = tcTable, column = 2, row = row, text = '30' + '\n' + str.tostring(percentChange_30, '#.##') + '%', bgcolor=color.new(resultColor_30, tfTableOpacity), text_color=resultColor_30, text_size=size.auto, width=0)
    table.cell(table_id = tcTable, column = 3, row = row, text = '60' + '\n' + str.tostring(percentChange_60, '#.##') + '%', bgcolor=color.new(resultColor_60, tfTableOpacity), text_color=resultColor_60, text_size=size.auto, width=0)
    table.cell(table_id = tcTable, column = 4, row = row, text = 'D' + '\n' + str.tostring(percentChange_1D, '#.##') + '%', bgcolor=color.new(resultColor_1D, tfTableOpacity), text_color=resultColor_1D, text_size=size.auto, width=0)
    table.cell(table_id = tcTable, column = 5, row = row, text = 'W' + '\n' + str.tostring(percentChange_1W, '#.##') + '%', bgcolor=color.new(resultColor_1W, tfTableOpacity), text_color=resultColor_1W, text_size=size.auto, width=0)
    table.cell(table_id = tcTable, column = 6, row = row, text = 'M' + '\n' + str.tostring(percentChange_1M, '#.##') + '%', bgcolor=color.new(resultColor_1M, tfTableOpacity), text_color=resultColor_1M, text_size=size.auto, width=0)
    table.cell(table_id = tcTable, column = 7, row = row, text = '3M' + '\n' + str.tostring(percentChange_3M, '#.##') + '%', bgcolor=color.new(resultColor_3M, tfTableOpacity), text_color=resultColor_3M, text_size=size.auto, width=0)

//##################################################################################################
//Ticker Details
//SPY, QQQ, VXX, XBI, XHB, XLB, XLC, XLE, XLF, XLI, XLK, XLP, XLRE, XLU, XLY, XLV, XRT, XOP, IBB, IYT, TLT, SMH
//##################################################################################################

// do not show timeframes that are less than the time frame selected (it will be inaccurate)
if barstate.islast
    var table tcTable = table.new(position=position.top_right, columns = 9, rows = 25, border_width=3)

    table.cell(table_id = tcTable, column = 0, row = 0, text = '')
    table.cell(table_id = tcTable, column = 1, row = 0, text = '')
    table.cell(table_id = tcTable, column = 2, row = 0, text = '')
    table.cell(table_id = tcTable, column = 3, row = 0, text = '')
    table.cell(table_id = tcTable, column = 4, row = 0, text = '')
    table.cell(table_id = tcTable, column = 5, row = 0, text = '')
    table.cell(table_id = tcTable, column = 6, row = 0, text = '')
    table.cell(table_id = tcTable, column = 7, row = 0, text = '')

    addTableRow(tcTable,"SPY",1)
    addTableRow(tcTable,"QQQ",2)
    addTableRow(tcTable,"VXX",3)
    addTableRow(tcTable,"SMH",4)
    addTableRow(tcTable,"XLK",5)
    addTableRow(tcTable,"XLE",6)
    addTableRow(tcTable,"XOP",7)
    addTableRow(tcTable,"XBI",8)
    addTableRow(tcTable,"XHB",9)
    addTableRow(tcTable,"XLB",10)
    addTableRow(tcTable,"XLC",11)
    addTableRow(tcTable,"XLF",12)

    addTableRow(tcTable,"XLI",13)
    addTableRow(tcTable,"XLP",14)
    addTableRow(tcTable,"XLRE",15)
    addTableRow(tcTable,"XLU",16)
    addTableRow(tcTable,"XLY",17)
    addTableRow(tcTable,"XLV",18)
    addTableRow(tcTable,"XRT",19)
    addTableRow(tcTable,"XLU",20)
    addTableRow(tcTable,"IBB",21)
    addTableRow(tcTable,"IYT",22)
    addTableRow(tcTable,"TLT",23)

    // table.cell(table_id = tcTable, column = 0, row = 1, text = 'SPY', bgcolor=color.new(spy_resultColor_1D, tfTableOpacity), text_color=spy_resultColor_1D, text_size=size.auto, width=0)
    // table.cell(table_id = tcTable, column = 1, row = 1, text = '15' + '\n' + str.tostring(spy_percentChange_15, '#.##') + '%', bgcolor=color.new(spy_resultColor_15, tfTableOpacity), text_color=spy_resultColor_15, text_size=size.auto, width=0)
    // table.cell(table_id = tcTable, column = 2, row = 1, text = '30' + '\n' + str.tostring(spy_percentChange_30, '#.##') + '%', bgcolor=color.new(spy_resultColor_30, tfTableOpacity), text_color=spy_resultColor_30, text_size=size.auto, width=0)
    // table.cell(table_id = tcTable, column = 3, row = 1, text = '60' + '\n' + str.tostring(spy_percentChange_60, '#.##') + '%', bgcolor=color.new(spy_resultColor_60, tfTableOpacity), text_color=spy_resultColor_60, text_size=size.auto, width=0)
    // table.cell(table_id = tcTable, column = 4, row = 1, text = 'D' + '\n' + str.tostring(spy_percentChange_1D, '#.##') + '%', bgcolor=color.new(spy_resultColor_1D, tfTableOpacity), text_color=spy_resultColor_1D, text_size=size.auto, width=0)
    // table.cell(table_id = tcTable, column = 5, row = 1, text = 'W' + '\n' + str.tostring(spy_percentChange_1W, '#.##') + '%', bgcolor=color.new(spy_resultColor_1W, tfTableOpacity), text_color=spy_resultColor_1W, text_size=size.auto, width=0)
    // table.cell(table_id = tcTable, column = 6, row = 1, text = 'M' + '\n' + str.tostring(spy_percentChange_1M, '#.##') + '%', bgcolor=color.new(spy_resultColor_1M, tfTableOpacity), text_color=spy_resultColor_1M, text_size=size.auto, width=0)
    // table.cell(table_id = tcTable, column = 7, row = 1, text = '3M' + '\n' + str.tostring(spy_percentChange_3M, '#.##') + '%', bgcolor=color.new(spy_resultColor_3M, tfTableOpacity), text_color=spy_resultColor_3M, text_size=size.auto, width=0)

    // table.cell(table_id = tcTable, column = 0, row = 2, text = 'QQQ', bgcolor=color.new(qqq_resultColor_1D, tfTableOpacity), text_color=qqq_resultColor_1D, text_size=size.auto, width=0)
    // table.cell(table_id = tcTable, column = 1, row = 2, text = '15' + '\n' + str.tostring(qqq_percentChange_15, '#.##') + '%', bgcolor=color.new(qqq_resultColor_15, tfTableOpacity), text_color=qqq_resultColor_15, text_size=size.auto, width=0)
    // table.cell(table_id = tcTable, column = 2, row = 2, text = '30' + '\n' + str.tostring(qqq_percentChange_30, '#.##') + '%', bgcolor=color.new(qqq_resultColor_30, tfTableOpacity), text_color=qqq_resultColor_30, text_size=size.auto, width=0)
    // table.cell(table_id = tcTable, column = 3, row = 2, text = '60' + '\n' + str.tostring(qqq_percentChange_60, '#.##') + '%', bgcolor=color.new(qqq_resultColor_60, tfTableOpacity), text_color=qqq_resultColor_60, text_size=size.auto, width=0)
    // table.cell(table_id = tcTable, column = 4, row = 2, text = 'D' + '\n' + str.tostring(qqq_percentChange_1D, '#.##') + '%', bgcolor=color.new(qqq_resultColor_1D, tfTableOpacity), text_color=qqq_resultColor_1D, text_size=size.auto, width=0)
    // table.cell(table_id = tcTable, column = 5, row = 2, text = 'W' + '\n' + str.tostring(qqq_percentChange_1W, '#.##') + '%', bgcolor=color.new(qqq_resultColor_1W, tfTableOpacity), text_color=qqq_resultColor_1W, text_size=size.auto, width=0)
    // table.cell(table_id = tcTable, column = 6, row = 2, text = 'M' + '\n' + str.tostring(qqq_percentChange_1M, '#.##') + '%', bgcolor=color.new(qqq_resultColor_1M, tfTableOpacity), text_color=qqq_resultColor_1M, text_size=size.auto, width=0)
    // table.cell(table_id = tcTable, column = 7, row = 2, text = '3M' + '\n' + str.tostring(qqq_percentChange_3M, '#.##') + '%', bgcolor=color.new(qqq_resultColor_3M, tfTableOpacity), text_color=qqq_resultColor_3M, text_size=size.auto, width=0)




// //##################################################################################################
// //Functions
// //##################################################################################################
// getRateOfReturn(openPrice, previousOpenPrice, closePrice, previousClosePrice, highPrice, previousHighPrice, lowPrice, previousLowPrice) =>
//     performance = ((closePrice - openPrice) / (math.max(openPrice,closePrice)) ) * 100.0
//     //performance = (_v1 - _v2) * 100 / math.abs(_v2)
//     candleType = getCandleType(highPrice, previousHighPrice, lowPrice, previousLowPrice)
//     [performance, candleType]

// getPerformance(symbol) =>
//     [performance, candleType] = request.security(symbol=symbol, timeframe=i_time_interval, expression=getRateOfReturn(open, open[1],close, close[1], high, high[1], low, low[1]))
//     [performance, candleType]


// //Add Cell to Row
// addCellToRow(table, column, _row, performance, candleType, symbol) =>
//     _c_color = performance >= 0 ? bullishColor : bearishColor
//     _transp = math.abs(performance) > 2 ? HEAVYTRANSP : math.abs(performance) > 1 ? AVGTRANSP : LIGHTTRANSP
//     cellText = str.tostring(performance, '0.00') + '%\n' + symbol
//     color textColor = na
//     if candleType == 1
//         textColor := insideColor
//         textColor
//     else if candleType == 3
//         textColor := outsideColor
//         textColor
//     else
//         textColor := _c_color
//         textColor

//     table.cell(table_id=table, column=column, row=_row, text=cellText, bgcolor=color.new(_c_color, _transp), text_color=textColor, text_size=indicatorTextSize)

// if barstate.islast
//     if emptyTopTableRow
//         table.cell(table_id = perfTable, column = 0, row = 0, text = '')
//         table.cell(table_id = perfTable, column = 1, row = 0, text = '')
//         table.cell(table_id = perfTable, column = 2, row = 0, text = '')
//         table.cell(table_id = perfTable, column = 3, row = 0, text = '')
//         table.cell(table_id = perfTable, column = 4, row = 0, text = '')
//         table.cell(table_id = perfTable, column = 5, row = 0, text = '')
//         table.cell(table_id = perfTable, column = 6, row = 0, text = '')

//         [perfHorizontal1, candleTypeHorizontal1] = getPerformance(symbol1)
//         addCellToRow(perfTable, 0, 1, perfHorizontal1, candleTypeHorizontal1, array.get(str.split(symbol1, ':'), 1))

//         [perfHorizontal2, candleTypeHorizontal2] = getPerformance(symbol2)
//         addCellToRow(perfTable, 1, 1, perfHorizontal2, candleTypeHorizontal2, array.get(str.split(symbol2, ':'), 1))

//         [perfHorizontal3, candleTypeHorizontal3] = getPerformance(symbol3)
//         addCellToRow(perfTable, 2, 1, perfHorizontal3, candleTypeHorizontal3, array.get(str.split(symbol3, ':'), 1))

//         [perfHorizontal4, candleTypeHorizontal4] = getPerformance(symbol4)
//         addCellToRow(perfTable, 3, 1, perfHorizontal4, candleTypeHorizontal4, array.get(str.split(symbol4, ':'), 1))

//         [perfHorizontal5, candleTypeHorizontal5] = getPerformance(symbol5)
//         addCellToRow(perfTable, 4, 1, perfHorizontal5, candleTypeHorizontal5, array.get(str.split(symbol5, ':'), 1))

//         [perfHorizontal6, candleTypeHorizontal6] = getPerformance(symbol6)
//         addCellToRow(perfTable, 5, 1, perfHorizontal6, candleTypeHorizontal6, array.get(str.split(symbol6, ':'), 1))

//         [perfHorizontal7, candleTypeHorizontal7] = getPerformance(symbol7)
//         addCellToRow(perfTable, 6, 1, perfHorizontal7, candleTypeHorizontal7, array.get(str.split(symbol7, ':'), 1))

//         [perfHorizontal8, candleTypeHorizontal8] = getPerformance(symbol8)
//         addCellToRow(perfTable, 0, 2, perfHorizontal8, candleTypeHorizontal8, array.get(str.split(symbol8, ':'), 1))

//         [perfHorizontal9, candleTypeHorizontal9] = getPerformance(symbol9)
//         addCellToRow(perfTable, 1, 2, perfHorizontal9, candleTypeHorizontal9, array.get(str.split(symbol9, ':'), 1))

//         [perfHorizontal10, candleTypeHorizontal10] = getPerformance(symbol10)
//         addCellToRow(perfTable, 2, 2, perfHorizontal10, candleTypeHorizontal10, array.get(str.split(symbol10, ':'), 1))

//         [perfHorizontal11, candleTypeHorizontal11] = getPerformance(symbol11)
//         addCellToRow(perfTable, 3, 2, perfHorizontal11, candleTypeHorizontal11, array.get(str.split(symbol11, ':'), 1))

//         [perfHorizontal12, candleTypeHorizontal12] = getPerformance(symbol12)
//         addCellToRow(perfTable, 4, 2, perfHorizontal12, candleTypeHorizontal12, array.get(str.split(symbol12, ':'), 1))

//         [perfHorizontal13, candleTypeHorizontal13] = getPerformance(symbol13)
//         addCellToRow(perfTable, 5, 2, perfHorizontal13, candleTypeHorizontal13, array.get(str.split(symbol13, ':'), 1))

//         [perfHorizontal14, candleTypeHorizontal14] = getPerformance(symbol14)
//         addCellToRow(perfTable, 6, 2, perfHorizontal14, candleTypeHorizontal14, array.get(str.split(symbol14, ':'), 1))



//         [perfHorizontal15, candleTypeHorizontal15] = getPerformance(symbol15)
//         addCellToRow(perfTable, 0, 3, perfHorizontal15, candleTypeHorizontal15, array.get(str.split(symbol15, ':'), 1))

//         [perfHorizontal16, candleTypeHorizontal16] = getPerformance(symbol16)
//         addCellToRow(perfTable, 1, 3, perfHorizontal16, candleTypeHorizontal16, array.get(str.split(symbol16, ':'), 1))

//         [perfHorizontal17, candleTypeHorizontal17] = getPerformance(symbol17)
//         addCellToRow(perfTable, 2, 3, perfHorizontal17, candleTypeHorizontal17, array.get(str.split(symbol17, ':'), 1))

//         [perfHorizontal18, candleTypeHorizontal18] = getPerformance(symbol18)
//         addCellToRow(perfTable, 3, 3, perfHorizontal18, candleTypeHorizontal18, array.get(str.split(symbol18, ':'), 1))

//         [perfHorizontal19, candleTypeHorizontal19] = getPerformance(symbol19)
//         addCellToRow(perfTable, 4, 3, perfHorizontal19, candleTypeHorizontal19, array.get(str.split(symbol19, ':'), 1))

//         [perfHorizontal20, candleTypeHorizontal20] = getPerformance(symbol20)
//         addCellToRow(perfTable, 5, 3, perfHorizontal20, candleTypeHorizontal20, array.get(str.split(symbol20, ':'), 1))

//         [perfHorizontal21, candleTypeHorizontal21] = getPerformance(symbol21)
//         addCellToRow(perfTable, 6, 3, perfHorizontal21, candleTypeHorizontal21, array.get(str.split(symbol21, ':'), 1))
//     else
//         [perfHorizontal1, candleTypeHorizontal1] = getPerformance(symbol1)
//         addCellToRow(perfTable, 0, 0, perfHorizontal1, candleTypeHorizontal1, array.get(str.split(symbol1, ':'), 1))

//         [perfHorizontal2, candleTypeHorizontal2] = getPerformance(symbol2)
//         addCellToRow(perfTable, 1, 0, perfHorizontal2, candleTypeHorizontal2, array.get(str.split(symbol2, ':'), 1))

//         [perfHorizontal3, candleTypeHorizontal3] = getPerformance(symbol3)
//         addCellToRow(perfTable, 2, 0, perfHorizontal3, candleTypeHorizontal3, array.get(str.split(symbol3, ':'), 1))

//         [perfHorizontal4, candleTypeHorizontal4] = getPerformance(symbol4)
//         addCellToRow(perfTable, 3, 0, perfHorizontal4, candleTypeHorizontal4, array.get(str.split(symbol4, ':'), 1))

//         [perfHorizontal5, candleTypeHorizontal5] = getPerformance(symbol5)
//         addCellToRow(perfTable, 4, 0, perfHorizontal5, candleTypeHorizontal5, array.get(str.split(symbol5, ':'), 1))

//         [perfHorizontal6, candleTypeHorizontal6] = getPerformance(symbol6)
//         addCellToRow(perfTable, 5, 0, perfHorizontal6, candleTypeHorizontal6, array.get(str.split(symbol6, ':'), 1))

//         [perfHorizontal7, candleTypeHorizontal7] = getPerformance(symbol7)
//         addCellToRow(perfTable, 6, 0, perfHorizontal7, candleTypeHorizontal7, array.get(str.split(symbol7, ':'), 1))

//         [perfHorizontal8, candleTypeHorizontal8] = getPerformance(symbol8)
//         addCellToRow(perfTable, 0, 1, perfHorizontal8, candleTypeHorizontal8, array.get(str.split(symbol8, ':'), 1))

//         [perfHorizontal9, candleTypeHorizontal9] = getPerformance(symbol9)
//         addCellToRow(perfTable, 1, 1, perfHorizontal9, candleTypeHorizontal9, array.get(str.split(symbol9, ':'), 1))

//         [perfHorizontal10, candleTypeHorizontal10] = getPerformance(symbol10)
//         addCellToRow(perfTable, 2, 1, perfHorizontal10, candleTypeHorizontal10, array.get(str.split(symbol10, ':'), 1))

//         [perfHorizontal11, candleTypeHorizontal11] = getPerformance(symbol11)
//         addCellToRow(perfTable, 3, 1, perfHorizontal11, candleTypeHorizontal11, array.get(str.split(symbol11, ':'), 1))

//         [perfHorizontal12, candleTypeHorizontal12] = getPerformance(symbol12)
//         addCellToRow(perfTable, 4, 1, perfHorizontal12, candleTypeHorizontal12, array.get(str.split(symbol12, ':'), 1))

//         [perfHorizontal13, candleTypeHorizontal13] = getPerformance(symbol13)
//         addCellToRow(perfTable, 5, 1, perfHorizontal13, candleTypeHorizontal13, array.get(str.split(symbol13, ':'), 1))

//         [perfHorizontal14, candleTypeHorizontal14] = getPerformance(symbol14)
//         addCellToRow(perfTable, 6, 1, perfHorizontal14, candleTypeHorizontal14, array.get(str.split(symbol14, ':'), 1))




//         [perfHorizontal15, candleTypeHorizontal15] = getPerformance(symbol15)
//         addCellToRow(perfTable, 0, 2, perfHorizontal15, candleTypeHorizontal15, array.get(str.split(symbol15, ':'), 1))

//         [perfHorizontal16, candleTypeHorizontal16] = getPerformance(symbol16)
//         addCellToRow(perfTable, 1, 2, perfHorizontal16, candleTypeHorizontal16, array.get(str.split(symbol16, ':'), 1))

//         [perfHorizontal17, candleTypeHorizontal17] = getPerformance(symbol17)
//         addCellToRow(perfTable, 2, 2, perfHorizontal17, candleTypeHorizontal17, array.get(str.split(symbol17, ':'), 1))

//         [perfHorizontal18, candleTypeHorizontal18] = getPerformance(symbol18)
//         addCellToRow(perfTable, 3, 2, perfHorizontal18, candleTypeHorizontal18, array.get(str.split(symbol18, ':'), 1))

//         [perfHorizontal19, candleTypeHorizontal19] = getPerformance(symbol19)
//         addCellToRow(perfTable, 4, 2, perfHorizontal19, candleTypeHorizontal19, array.get(str.split(symbol18, ':'), 1))

//         [perfHorizontal20, candleTypeHorizontal20] = getPerformance(symbol20)
//         addCellToRow(perfTable, 5, 2, perfHorizontal20, candleTypeHorizontal20, array.get(str.split(symbol20, ':'), 1))

//         [perfHorizontal21, candleTypeHorizontal21] = getPerformance(symbol21)
//         addCellToRow(perfTable, 6, 2, perfHorizontal21, candleTypeHorizontal21, array.get(str.split(symbol21, ':'), 1))
