//@version=5

// ||###################################################################################||
// ||                                                                                   ||
// || Cipher DMG                                                                        ||
// || The Strat                                                                         ||
// ||     https://www.tradingview.com/script/0drMdHsO-TTM-Squeeze-Pro                   ||
// ||                                                                                   ||
// ||                                                                                   ||
// ||###################################################################################||

indicator(title="The Strat Sector Performance", shorttitle="The Strat Sector Performance", max_labels_count = 500, overlay=true)

LIGHTTRANSP = 90
AVGTRANSP = 80
HEAVYTRANSP = 70

var string _gp1 = 'Time Interval'
string i_time_interval = input.string('1D', '', inline='11', options=['1', '5', '15', '30', '60', '1D', '1W', '1M', '3M', '12M'], group=_gp1)

var string _gp2 = 'Display'
emptyTopTableRow = input.bool(true, title='Insert a blank table row at the top to gain more space', group=_gp2)
bullishColor = input.color(color.new(color.green, 0), title='Bullish Color', group=_gp2)
bearishColor = input.color(color.new(color.red, 0), title='Bearish Color', group=_gp2)
insideColor = input.color(color.new(color.white, 0), 'Inside Bar', inline='12', group=_gp2)
outsideColor = input.color(color.new(color.yellow, 0), 'Outside Bar', inline='12', group=_gp2)
tableYPositive = input.string('top', 'Panel position', inline='11', options=['top', 'middle', 'bottom'], group=_gp2)
tableXPositive = input.string('right', '', inline='11', options=['left', 'center', 'right'], group=_gp2)
indicatorPosition = input.string('horizontal', 'Direction', options=['horizontal', 'vertical'], group=_gp2)
indicatorTextSize = input.string('normal', 'Text Size', options=['tiny', 'small', 'normal', 'large', 'huge'], group=_gp2)


//XBI, XHB, XLB, XLC, XLE, XLF, XLI, XLK, XLP, XLRE, XLU, XLY, XLV, XRT, XOP, IBB, IYT, TLT, SMH
var string _gp3 = 'Symbols'
symbol1 = input.symbol('SPY', group=_gp3)
symbol2 = input.symbol('QQQ', group=_gp3)
symbol3 = input.symbol('VXX', group=_gp3)
symbol4 = input.symbol('SMH', group=_gp3)
symbol5 = input.symbol('XLK', group=_gp3)
symbol6 = input.symbol('XLF', group=_gp3)
symbol7 = input.symbol('XLC', group=_gp3)
symbol8 = input.symbol('XLE', group=_gp3)
symbol9 = input.symbol('XOP', group=_gp3)
symbol10 = input.symbol('XLY', group=_gp3)
symbol11 = input.symbol('XLU', group=_gp3)
symbol12 = input.symbol('XLP', group=_gp3)
symbol13 = input.symbol('XLI', group=_gp3)
symbol14 = input.symbol('XLV', group=_gp3)


var table perfTable = table.new(position = tableYPositive + '_' + tableXPositive, columns=7, rows=12, border_width=3)

//##################################################################################################
//Candle Type
//##################################################################################################
getCandleType(_high, _high1, _low, _low1) =>
    candleType = 0

    //Higher High and Lower Low
    if _high > _high1 and _low < _low1
        candleType := 3
        candleType

    else if _high <= _high1 and _low >= _low1
        //Lower High and Higher Low
        if _high <= _high1 and _low >= _low1
            candleType := 1
            candleType
        else
            candleType := 2
            candleType
    candleType



// @function Entire Candle wick to wick is inside the previous candle.  This is considered a Scenario 1.
// It means its consolidation on a smaller timeframe  We do not want to trade things on a 1 because it has Not picked its direction.
// @param idx index to use
// @returns
isInsideCandle(int idx) =>
    high[idx] <= high[idx + 1] and low[idx] >= low[idx + 1]

//@function Candle engulfs the previous candle and is typically the larges bar.  This is considered a Scenario 3
//Most commonly 3s occur after 1
//@return
isOutsideCandle(int idx) =>
    high[idx] > high[idx + 1] and low[idx] < low[idx + 1]




//##################################################################################################
//Functions
//##################################################################################################
getRateOfReturn(openPrice, previousOpenPrice, closePrice, previousClosePrice, highPrice, previousHighPrice, lowPrice, previousLowPrice) =>
    performance = ((closePrice - openPrice) / (math.max(openPrice,closePrice)) ) * 100.0
    //performance = (_v1 - _v2) * 100 / math.abs(_v2)
    candleType = getCandleType(highPrice, previousHighPrice, lowPrice, previousLowPrice)
    [performance, candleType]

getPerformance(symbol) =>
    [performance, candleType] = request.security(symbol=symbol, timeframe=i_time_interval, expression=getRateOfReturn(open, open[1],close, close[1], high, high[1], low, low[1]))
    [performance, candleType]


//Add Cell to Row
addCellToRow(table, column, _row, performance, candleType, symbol) =>
    _c_color = performance >= 0 ? bullishColor : bearishColor
    _transp = math.abs(performance) > 2 ? HEAVYTRANSP : math.abs(performance) > 1 ? AVGTRANSP : LIGHTTRANSP
    cellText = str.tostring(performance, '0.00') + '%\n' + symbol
    color textColor = na
    if candleType == 1
        textColor := insideColor
        textColor
    else if candleType == 3
        textColor := outsideColor
        textColor
    else
        textColor := _c_color
        textColor

    table.cell(table_id=table, column=column, row=_row, text=cellText, bgcolor=color.new(_c_color, _transp), text_color=textColor, text_size=indicatorTextSize)

if barstate.islast
    if indicatorPosition == 'horizontal'
        if emptyTopTableRow
            table.cell(table_id = perfTable, column = 0, row = 0, text = '')
            table.cell(table_id = perfTable, column = 1, row = 0, text = '')
            table.cell(table_id = perfTable, column = 2, row = 0, text = '')
            table.cell(table_id = perfTable, column = 3, row = 0, text = '')
            table.cell(table_id = perfTable, column = 4, row = 0, text = '')
            table.cell(table_id = perfTable, column = 5, row = 0, text = '')
            table.cell(table_id = perfTable, column = 6, row = 0, text = '')

            [perfHorizontal1, candleTypeHorizontal1] = getPerformance(symbol1)
            addCellToRow(perfTable, 0, 1, perfHorizontal1, candleTypeHorizontal1, array.get(str.split(symbol1, ':'), 1))

            [perfHorizontal2, candleTypeHorizontal2] = getPerformance(symbol2)
            addCellToRow(perfTable, 1, 1, perfHorizontal2, candleTypeHorizontal2, array.get(str.split(symbol2, ':'), 1))

            [perfHorizontal3, candleTypeHorizontal3] = getPerformance(symbol3)
            addCellToRow(perfTable, 2, 1, perfHorizontal3, candleTypeHorizontal3, array.get(str.split(symbol3, ':'), 1))

            [perfHorizontal4, candleTypeHorizontal4] = getPerformance(symbol4)
            addCellToRow(perfTable, 3, 1, perfHorizontal4, candleTypeHorizontal4, array.get(str.split(symbol4, ':'), 1))

            [perfHorizontal5, candleTypeHorizontal5] = getPerformance(symbol5)
            addCellToRow(perfTable, 4, 1, perfHorizontal5, candleTypeHorizontal5, array.get(str.split(symbol5, ':'), 1))

            [perfHorizontal6, candleTypeHorizontal6] = getPerformance(symbol6)
            addCellToRow(perfTable, 5, 1, perfHorizontal6, candleTypeHorizontal6, array.get(str.split(symbol6, ':'), 1))

            [perfHorizontal7, candleTypeHorizontal7] = getPerformance(symbol7)
            addCellToRow(perfTable, 6, 1, perfHorizontal7, candleTypeHorizontal7, array.get(str.split(symbol7, ':'), 1))

            [perfHorizontal8, candleTypeHorizontal8] = getPerformance(symbol8)
            addCellToRow(perfTable, 0, 2, perfHorizontal8, candleTypeHorizontal8, array.get(str.split(symbol8, ':'), 1))

            [perfHorizontal9, candleTypeHorizontal9] = getPerformance(symbol9)
            addCellToRow(perfTable, 1, 2, perfHorizontal9, candleTypeHorizontal9, array.get(str.split(symbol9, ':'), 1))

            [perfHorizontal10, candleTypeHorizontal10] = getPerformance(symbol10)
            addCellToRow(perfTable, 2, 2, perfHorizontal10, candleTypeHorizontal10, array.get(str.split(symbol10, ':'), 1))

            [perfHorizontal11, candleTypeHorizontal11] = getPerformance(symbol11)
            addCellToRow(perfTable, 3, 2, perfHorizontal11, candleTypeHorizontal11, array.get(str.split(symbol11, ':'), 1))

            [perfHorizontal12, candleTypeHorizontal12] = getPerformance(symbol12)
            addCellToRow(perfTable, 4, 2, perfHorizontal12, candleTypeHorizontal12, array.get(str.split(symbol12, ':'), 1))

            [perfHorizontal13, candleTypeHorizontal13] = getPerformance(symbol13)
            addCellToRow(perfTable, 5, 2, perfHorizontal13, candleTypeHorizontal13, array.get(str.split(symbol13, ':'), 1))

            [perfHorizontal14, candleTypeHorizontal14] = getPerformance(symbol14)
            addCellToRow(perfTable, 6, 2, perfHorizontal14, candleTypeHorizontal14, array.get(str.split(symbol14, ':'), 1))
        else
            [perfHorizontal1, candleTypeHorizontal1] = getPerformance(symbol1)
            addCellToRow(perfTable, 0, 0, perfHorizontal1, candleTypeHorizontal1, array.get(str.split(symbol1, ':'), 1))

            [perfHorizontal2, candleTypeHorizontal2] = getPerformance(symbol2)
            addCellToRow(perfTable, 1, 0, perfHorizontal2, candleTypeHorizontal2, array.get(str.split(symbol2, ':'), 1))

            [perfHorizontal3, candleTypeHorizontal3] = getPerformance(symbol3)
            addCellToRow(perfTable, 2, 0, perfHorizontal3, candleTypeHorizontal3, array.get(str.split(symbol3, ':'), 1))

            [perfHorizontal4, candleTypeHorizontal4] = getPerformance(symbol4)
            addCellToRow(perfTable, 3, 0, perfHorizontal4, candleTypeHorizontal4, array.get(str.split(symbol4, ':'), 1))

            [perfHorizontal5, candleTypeHorizontal5] = getPerformance(symbol5)
            addCellToRow(perfTable, 4, 0, perfHorizontal5, candleTypeHorizontal5, array.get(str.split(symbol5, ':'), 1))

            [perfHorizontal6, candleTypeHorizontal6] = getPerformance(symbol6)
            addCellToRow(perfTable, 5, 0, perfHorizontal6, candleTypeHorizontal6, array.get(str.split(symbol6, ':'), 1))

            [perfHorizontal7, candleTypeHorizontal7] = getPerformance(symbol7)
            addCellToRow(perfTable, 6, 0, perfHorizontal7, candleTypeHorizontal7, array.get(str.split(symbol7, ':'), 1))

            [perfHorizontal8, candleTypeHorizontal8] = getPerformance(symbol8)
            addCellToRow(perfTable, 0, 1, perfHorizontal8, candleTypeHorizontal8, array.get(str.split(symbol8, ':'), 1))

            [perfHorizontal9, candleTypeHorizontal9] = getPerformance(symbol9)
            addCellToRow(perfTable, 1, 1, perfHorizontal9, candleTypeHorizontal9, array.get(str.split(symbol9, ':'), 1))

            [perfHorizontal10, candleTypeHorizontal10] = getPerformance(symbol10)
            addCellToRow(perfTable, 2, 1, perfHorizontal10, candleTypeHorizontal10, array.get(str.split(symbol10, ':'), 1))

            [perfHorizontal11, candleTypeHorizontal11] = getPerformance(symbol11)
            addCellToRow(perfTable, 3, 1, perfHorizontal11, candleTypeHorizontal11, array.get(str.split(symbol11, ':'), 1))

            [perfHorizontal12, candleTypeHorizontal12] = getPerformance(symbol12)
            addCellToRow(perfTable, 4, 1, perfHorizontal12, candleTypeHorizontal12, array.get(str.split(symbol12, ':'), 1))

            [perfHorizontal13, candleTypeHorizontal13] = getPerformance(symbol13)
            addCellToRow(perfTable, 5, 1, perfHorizontal13, candleTypeHorizontal13, array.get(str.split(symbol13, ':'), 1))

            [perfHorizontal14, candleTypeHorizontal14] = getPerformance(symbol14)
            addCellToRow(perfTable, 6, 1, perfHorizontal14, candleTypeHorizontal14, array.get(str.split(symbol14, ':'), 1))
    else if indicatorPosition == 'vertical'
        if emptyTopTableRow
            table.cell(table_id = perfTable, column = 0, row = 0, text = '')
            table.cell(table_id = perfTable, column = 1, row = 0, text = '')

            [perfVertical, candleTypeVertical1] = getPerformance(symbol1)
            addCellToRow(perfTable, 0, 1, perfVertical, candleTypeVertical1, array.get(str.split(symbol1, ':'), 1))

            [perfv2, candleTypeVertical2] = getPerformance(symbol2)
            addCellToRow(perfTable, 1, 1, perfv2, candleTypeVertical2, array.get(str.split(symbol2, ':'), 1))

            [perfv3, candleTypeVertical3] = getPerformance(symbol3)
            addCellToRow(perfTable, 0, 2, perfv3, candleTypeVertical3, array.get(str.split(symbol3, ':'), 1))

            [perfv4, candleTypeVertical4] = getPerformance(symbol4)
            addCellToRow(perfTable, 1, 2, perfv4, candleTypeVertical4, array.get(str.split(symbol4, ':'), 1))

            [perfv5, candleTypeVertical5] = getPerformance(symbol5)
            addCellToRow(perfTable, 0, 3, perfv5, candleTypeVertical5, array.get(str.split(symbol5, ':'), 1))

            [perfv6, candleTypeVertical6] = getPerformance(symbol6)
            addCellToRow(perfTable, 1, 3, perfv6, candleTypeVertical6, array.get(str.split(symbol6, ':'), 1))

            [perfv7, candleTypeVertical7] = getPerformance(symbol7)
            addCellToRow(perfTable, 0, 4, perfv7, candleTypeVertical7, array.get(str.split(symbol7, ':'), 1))

            [perfv8, candleTypeVertical8] = getPerformance(symbol8)
            addCellToRow(perfTable, 1, 4, perfv8, candleTypeVertical8, array.get(str.split(symbol8, ':'), 1))

            [perfv9, candleTypeVertical9] = getPerformance(symbol9)
            addCellToRow(perfTable, 0, 5, perfv9, candleTypeVertical9, array.get(str.split(symbol9, ':'), 1))

            [perfVertical0, candleTypeVertical10] = getPerformance(symbol10)
            addCellToRow(perfTable, 1, 5, perfVertical0, candleTypeVertical10, array.get(str.split(symbol10, ':'), 1))

            [perfVertical1, candleTypeVertical11] = getPerformance(symbol11)
            addCellToRow(perfTable, 0, 6, perfVertical1, candleTypeVertical11, array.get(str.split(symbol11, ':'), 1))

            [perfVertical2, candleTypeVertical12] = getPerformance(symbol12)
            addCellToRow(perfTable, 1, 6, perfVertical2, candleTypeVertical12, array.get(str.split(symbol12, ':'), 1))

            [perfVertical3, candleTypeVertical13] = getPerformance(symbol13)
            addCellToRow(perfTable, 0, 7, perfVertical3, candleTypeVertical13, array.get(str.split(symbol13, ':'), 1))

            [perfVertical4, candleTypeVertical14] = getPerformance(symbol14)
            addCellToRow(perfTable, 1, 7, perfVertical4, candleTypeVertical14, array.get(str.split(symbol14, ':'), 1))

        else
            [perfVertical, candleTypeVertical1] = getPerformance(symbol1)
            addCellToRow(perfTable, 0, 0, perfVertical, candleTypeVertical1, array.get(str.split(symbol1, ':'), 1))

            [perfv2, candleTypeVertical2] = getPerformance(symbol2)
            addCellToRow(perfTable, 1, 0, perfv2, candleTypeVertical2, array.get(str.split(symbol2, ':'), 1))

            [perfv3, candleTypeVertical3] = getPerformance(symbol3)
            addCellToRow(perfTable, 0, 1, perfv3, candleTypeVertical3, array.get(str.split(symbol3, ':'), 1))

            [perfv4, candleTypeVertical4] = getPerformance(symbol4)
            addCellToRow(perfTable, 1, 1, perfv4, candleTypeVertical4, array.get(str.split(symbol4, ':'), 1))

            [perfv5, candleTypeVertical5] = getPerformance(symbol5)
            addCellToRow(perfTable, 0, 2, perfv5, candleTypeVertical5, array.get(str.split(symbol5, ':'), 1))

            [perfv6, candleTypeVertical6] = getPerformance(symbol6)
            addCellToRow(perfTable, 1, 2, perfv6, candleTypeVertical6, array.get(str.split(symbol6, ':'), 1))

            [perfv7, candleTypeVertical7] = getPerformance(symbol7)
            addCellToRow(perfTable, 0, 3, perfv7, candleTypeVertical7, array.get(str.split(symbol7, ':'), 1))

            [perfv8, candleTypeVertical8] = getPerformance(symbol8)
            addCellToRow(perfTable, 1, 3, perfv8, candleTypeVertical8, array.get(str.split(symbol8, ':'), 1))

            [perfv9, candleTypeVertical9] = getPerformance(symbol9)
            addCellToRow(perfTable, 0, 4, perfv9, candleTypeVertical9, array.get(str.split(symbol9, ':'), 1))

            [perfVertical0, candleTypeVertical10] = getPerformance(symbol10)
            addCellToRow(perfTable, 1, 4, perfVertical0, candleTypeVertical10, array.get(str.split(symbol10, ':'), 1))

            [perfVertical1, candleTypeVertical11] = getPerformance(symbol11)
            addCellToRow(perfTable, 0, 5, perfVertical1, candleTypeVertical11, array.get(str.split(symbol11, ':'), 1))

            [perfVertical2, candleTypeVertical12] = getPerformance(symbol12)
            addCellToRow(perfTable, 1, 5, perfVertical2, candleTypeVertical12, array.get(str.split(symbol12, ':'), 1))

            [perfVertical3, candleTypeVertical13] = getPerformance(symbol13)
            addCellToRow(perfTable, 0, 6, perfVertical3, candleTypeVertical13, array.get(str.split(symbol13, ':'), 1))

            [perfVertical4, candleTypeVertical14] = getPerformance(symbol14)
            addCellToRow(perfTable, 1, 6, perfVertical4, candleTypeVertical14, array.get(str.split(symbol14, ':'), 1))
