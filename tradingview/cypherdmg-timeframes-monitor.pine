//@version=5
// ||###################################################################################||
// ||                                                                                   ||
// || The Strat Time Frame Continuity                                                   ||
// ||                                                                                   ||
// ||                                                                                   ||
// ||###################################################################################||

indicator(title="The Strat TimeFrames", shorttitle="The Strat TimeFrames", max_labels_count = 500, overlay=true)

//##################################################################################################
//User Inputs
//##################################################################################################

bullishColor = input.color(color.new(color.green, 0), title='Bullish Candle Color', group='Timeframe Continuity Colors')
bullishTextColor = input.color(color.new(color.green, 0), title='Bullish Text Color', group='Timeframe Continuity Colors')

bearishColor = input.color(color.new(color.red, 0), title='Bearish Candle Color', group='Timeframe Continuity Colors')
bearishTextColor = input.color(color.new(color.red, 0), title='Bearish Text Color', group='Timeframe Continuity Colors')

atrColor = input.color(color.new(color.gray, 0), title='ATR Candle Color', group='Timeframe Continuity Colors')
atrTextColor = input.color(color.new(color.white, 0), title='ATR Text Color', group='Timeframe Continuity Colors')

tfTableOpacity = input.int(80, title='Multi time frame table opacity', group='Timeframe Continuity Colors')

cellWidth = input.int(3, title='Cell Width', group='Time Frame Continuation Table')
isTfEnabled = input.bool(true, title='Time Frame Continuity Panel Enabled', group='Time Frame Continuation')
emptyTopTableRow = input.bool(true, title='Insert a blank table row at the top to gain more space', group='Time Frame Continuation')
showDTRAndATR = input.bool(true, title='Show ATR and DTR', group='Time Frame Continuation')

// FULL TIME FRAME CONTINUITY CODE:
//reusable function for getting detail on the security
getSecurityByTimeFrame(timeFrame) =>
    [openValue, closeValue, highValue, lowValue, timeValue] = request.security(symbol = syminfo.tickerid, timeframe = timeFrame, expression = [open, close, high, low, time], gaps = barmerge.gaps_off)
    [openValue, closeValue, highValue, lowValue, timeValue]


//getPercentChange
getPercentChange(openPrice,closePrice) =>

    //The Percent Change will be the closePrice - openPrice / (max (openPrice, closePrice))
    percentChange = ((closePrice - openPrice) / (math.max(openPrice,closePrice)) ) * 100.0
    resultColor = openPrice >= closePrice ? bearishColor : bullishColor
    resultTextColor = openPrice >= closePrice ? bearishTextColor : bullishTextColor
    [percentChange,resultTextColor,resultColor]


//##################################################################################################
//FTFC
//##################################################################################################
cdayhigh = request.security(syminfo.tickerid, '1D', high)
cdaylow = request.security(syminfo.tickerid, '1D', low)
dAtr = request.security(syminfo.tickerid, '1D', ta.atr(14), lookahead=barmerge.lookahead_on)



// get open, close, high, and low series for various time frames

[open15Value, close15Value, high15Value, low15Value, time15Value] = getSecurityByTimeFrame('15')
[open30Value, close30Value, high30Value, low30Value, time30Value] = getSecurityByTimeFrame('30')
[open60Value, close60Value, highHourValue, lowHourValue, timeHourValue] = getSecurityByTimeFrame('60')
[openDayValue, closeDayValue, highDayValue, lowDayValue, timeDayValue] = getSecurityByTimeFrame('1D')
[openWeekValue, closeWeekValue, highWeekValue, lowWeekValue, timeWeekValue] = getSecurityByTimeFrame('1W')
[openMonthValue, closeMonthValue, highMonthValue, lowMonthValue, timeMonthValue] = getSecurityByTimeFrame('1M')
[openQuarterValue, closeQuarterValue, highQuarterValue, lowQuarterValue, timeQuarterValue] = getSecurityByTimeFrame('3M')


//There is a bug, if you select a week it will show the first day of the weeks data, if you show the Month it will show the first week of the months data ... not sure why
//but this is the same bug as the strat assistant.
//do not show timeframes that are less than the time frame selected (it will be inaccurate)
is15ValidTimeFrame = timeframe.period == '1' or timeframe.period == '3' or timeframe.period == '5' or timeframe.period == '10' or timeframe.period == '15'
is30ValidTimeFrame = timeframe.period == '30'
isHourValidTimeFrame = timeframe.period == '60'
isDayValidTimeFrame = timeframe.isdaily
isWeekValidTimeFrame = timeframe.period == 'W' or timeframe.isintraday
isMonthValidTimeFrame = timeframe.period == 'M'
isQuarterValidTimeFrame = timeframe.period == '3M'


//https://www.tradingview.com/script/UFTT8ROh-RedK-Portfolio-Tracker-Table-Version/

// do not show timeframes that are less than the time frame selected (it will be inaccurate)
if barstate.islast and isTfEnabled

    [tf15MChg,tf15MTextColor,tf15MColor] = getPercentChange(open15Value,close15Value)
    [tf30MChg,tf30MTextColor,tf30MColor] = getPercentChange(open30Value,close30Value)
    [tf60MChg,tf60MTextColor,tf60MColor] = getPercentChange(open60Value,close60Value)
    [tf1DChg,tf1DTextColor,tf1DColor] = getPercentChange(openDayValue,closeDayValue)
    [tf1WChg,tf1WTextColor,tf1WColor] = getPercentChange(openWeekValue,closeWeekValue)
    [tf1MChg,tf1MTextColor,tf1MColor] = getPercentChange(openMonthValue,closeMonthValue)
    [tf3MChg,tf3MTextColor,tf3MColor] = getPercentChange(openQuarterValue,closeQuarterValue)

    if is15ValidTimeFrame

        if emptyTopTableRow
            var table tcTable = table.new(position=position.top_right, columns = 9, rows = 2, border_width=cellWidth)
            //var table tcTable = table.new(position=position.top_right, columns = 9, rows = 2,frame_color=color.new(color.black, 0),  border_color=color.new(color.black, 0), border_width=cellWidth)

            table.cell(table_id = tcTable, column = 0, row = 0, text = '')
            table.cell(table_id = tcTable, column = 0, row = 1, text = '15' + '\n' + str.tostring(tf15MChg, '#.##') + '%', bgcolor=color.new(tf15MColor, tfTableOpacity), text_color=tf15MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 1, row = 0, text = '')
            table.cell(table_id = tcTable, column = 1, row = 1, text = '30' + '\n' + str.tostring(tf30MChg, '#.##') + '%', bgcolor=color.new(tf30MColor, tfTableOpacity), text_color=tf30MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 2, row = 0, text = '')
            table.cell(table_id = tcTable, column = 2, row = 1, text = '60' + '\n' + str.tostring(tf60MChg, '#.##') + '%', bgcolor=color.new(tf60MColor, tfTableOpacity), text_color=tf60MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 3, row = 0, text = '')
            table.cell(table_id = tcTable, column = 3, row = 1, text = 'D' + '\n' + str.tostring(tf1DChg, '#.##') + '%', bgcolor=color.new(tf1DColor, tfTableOpacity), text_color=tf1DTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 4, row = 0, text = '')
            table.cell(table_id = tcTable, column = 4, row = 1, text = 'W' + '\n' + str.tostring(tf1WChg, '#.##') + '%', bgcolor=color.new(tf1WColor, tfTableOpacity), text_color=tf1WTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 5, row = 0, text = '')
            table.cell(table_id = tcTable, column = 5, row = 1, text = 'M' + '\n' + str.tostring(tf1MChg, '#.##') + '%', bgcolor=color.new(tf1MColor, tfTableOpacity), text_color=tf1MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 6, row = 0, text = '')
            table.cell(table_id = tcTable, column = 6, row = 1, text = '3M' + '\n' + str.tostring(tf3MChg, '#.##') + '%', bgcolor=color.new(tf3MColor, tfTableOpacity), text_color=tf3MTextColor, text_size=size.auto, width=0)

            if showDTRAndATR
                table.cell(table_id = tcTable, column = 7, row = 0, text = '')
                table.cell(table_id = tcTable, column = 7, row = 1, text = 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

                table.cell(table_id = tcTable, column = 8, row = 0, text = '')
                table.cell(table_id = tcTable, column = 8, row = 1, text = 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

        else
            var table tcTable = table.new(position=position.top_right, columns = 9, rows = 1, border_width=cellWidth)

            table.cell(table_id = tcTable, column = 0, row = 0, text = '15' + '\n' + str.tostring(tf15MChg, '#.##') + '%', bgcolor=color.new(tf15MColor, tfTableOpacity), text_color=tf15MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 1, row = 0, text = '30' + '\n' + str.tostring(tf30MChg, '#.##') + '%', bgcolor=color.new(tf30MColor, tfTableOpacity), text_color=tf30MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 2, row = 0, text = '60' + '\n' + str.tostring(tf60MChg, '#.##') + '%', bgcolor=color.new(tf60MColor, tfTableOpacity), text_color=tf60MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 3, row = 0, text = 'D' + '\n' + str.tostring(tf1DChg, '#.##') + '%', bgcolor=color.new(tf1DColor, tfTableOpacity), text_color=tf1DTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 4, row = 0, text = 'W' + '\n' + str.tostring(tf1WChg, '#.##') + '%', bgcolor=color.new(tf1WColor, tfTableOpacity), text_color=tf1WTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 5, row = 0, text = 'M' + '\n' + str.tostring(tf1MChg, '#.##') + '%', bgcolor=color.new(tf1MColor, tfTableOpacity), text_color=tf1MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 6, row = 0, text = '3M' + '\n' + str.tostring(tf3MChg, '#.##') + '%', bgcolor=color.new(tf3MColor, tfTableOpacity), text_color=tf3MTextColor, text_size=size.auto, width=0)

            if showDTRAndATR
                table.cell(table_id = tcTable, column = 7, row = 0, text = 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

                table.cell(table_id = tcTable, column = 8, row = 0, text = 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

    else if is30ValidTimeFrame
        if emptyTopTableRow
            var table tcTable = table.new(position=position.top_right, columns = 8, rows = 2, border_width=cellWidth)

            table.cell(table_id = tcTable, column = 0, row = 0, text = '')
            table.cell(table_id = tcTable, column = 0, row = 1, text = '30' + '\n' + str.tostring(tf30MChg, '#.##') + '%', bgcolor=color.new(tf30MColor, tfTableOpacity), text_color=tf30MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 1, row = 0, text = '')
            table.cell(table_id = tcTable, column = 1, row = 1, text = '60' + '\n' + str.tostring(tf60MChg, '#.##') + '%', bgcolor=color.new(tf60MColor, tfTableOpacity), text_color=tf60MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 2, row = 0, text = '')
            table.cell(table_id = tcTable, column = 2, row = 1, text = 'D' + '\n' + str.tostring(tf1DChg, '#.##') + '%', bgcolor=color.new(tf1DColor, tfTableOpacity), text_color=tf1DTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 3, row = 0, text = '')
            table.cell(table_id = tcTable, column = 3, row = 1, text = 'W' + '\n' + str.tostring(tf1WChg, '#.##') + '%', bgcolor=color.new(tf1WColor, tfTableOpacity), text_color=tf1WTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 4, row = 0, text = '')
            table.cell(table_id = tcTable, column = 4, row = 1, text = 'M' + '\n' + str.tostring(tf1MChg, '#.##') + '%', bgcolor=color.new(tf1MColor, tfTableOpacity), text_color=tf1MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 5, row = 0, text = '')
            table.cell(table_id = tcTable, column = 5, row = 1, text = '3M' + '\n' + str.tostring(tf3MChg, '#.##') + '%', bgcolor=color.new(tf3MColor, tfTableOpacity), text_color=tf3MTextColor, text_size=size.auto, width=0)

            if showDTRAndATR
                table.cell(table_id = tcTable, column = 6, row = 0, text = '')
                table.cell(table_id = tcTable, column = 6, row = 1, text = 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

                table.cell(table_id = tcTable, column = 7, row = 0, text = '')
                table.cell(table_id = tcTable, column = 7, row = 1, text = 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

        else
            var table tcTable = table.new(position=position.top_right, columns = 8, rows = 1, border_width=cellWidth)

            table.cell(table_id = tcTable, column = 0, row = 0, text = '30' + '\n' + str.tostring(tf30MChg, '#.##') + '%', bgcolor=color.new(tf30MColor, tfTableOpacity), text_color=tf30MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 1, row = 0, text = '60' + '\n' + str.tostring(tf60MChg, '#.##') + '%', bgcolor=color.new(tf60MColor, tfTableOpacity), text_color=tf60MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 2, row = 0, text = 'D' + '\n' + str.tostring(tf1DChg, '#.##') + '%', bgcolor=color.new(tf1DColor, tfTableOpacity), text_color=tf1DTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 3, row = 0, text = 'W' + '\n' + str.tostring(tf1WChg, '#.##') + '%', bgcolor=color.new(tf1WColor, tfTableOpacity), text_color=tf1WTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 4, row = 0, text = 'M' + '\n' + str.tostring(tf1MChg, '#.##') + '%', bgcolor=color.new(tf1MColor, tfTableOpacity), text_color=tf1MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 5, row = 0, text = '3M' + '\n' + str.tostring(tf3MChg, '#.##') + '%', bgcolor=color.new(tf3MColor, tfTableOpacity), text_color=tf3MTextColor, text_size=size.auto, width=0)

            if showDTRAndATR
                table.cell(table_id = tcTable, column = 6, row = 0, text = 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

                table.cell(table_id = tcTable, column = 7, row = 0, text = 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

    else if isHourValidTimeFrame

        if emptyTopTableRow
            var table tcTable = table.new(position=position.top_right, columns = 7, rows = 2, border_width=cellWidth)

            table.cell(table_id = tcTable, column = 0, row = 0, text = '')
            table.cell(table_id = tcTable, column = 0, row = 1, text = '60' + '\n' + str.tostring(tf60MChg, '#.##') + '%', bgcolor=color.new(tf60MColor, tfTableOpacity), text_color=tf60MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 1, row = 0, text = '')
            table.cell(table_id = tcTable, column = 1, row = 1, text = 'D' + '\n' + str.tostring(tf1DChg, '#.##') + '%', bgcolor=color.new(tf1DColor, tfTableOpacity), text_color=tf1DTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 2, row = 0, text = '')
            table.cell(table_id = tcTable, column = 2, row = 1, text = 'W' + '\n' + str.tostring(tf1WChg, '#.##') + '%', bgcolor=color.new(tf1WColor, tfTableOpacity), text_color=tf1WTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 3, row = 0, text = '')
            table.cell(table_id = tcTable, column = 3, row = 1, text = 'M' + '\n' + str.tostring(tf1MChg, '#.##') + '%', bgcolor=color.new(tf1MColor, tfTableOpacity), text_color=tf1MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 4, row = 0, text = '')
            table.cell(table_id = tcTable, column = 4, row = 1, text = '3M' + '\n' + str.tostring(tf3MChg, '#.##') + '%', bgcolor=color.new(tf3MColor, tfTableOpacity), text_color=tf3MTextColor, text_size=size.auto, width=0)

            if showDTRAndATR
                table.cell(table_id = tcTable, column = 5, row = 0, text = '')
                table.cell(table_id = tcTable, column = 5, row = 1, text = 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

                table.cell(table_id = tcTable, column = 6, row = 0, text = '')
                table.cell(table_id = tcTable, column = 6, row = 1, text = 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

        else
            var table tcTable = table.new(position=position.top_right, columns = 7, rows = 1, border_width=cellWidth)

            table.cell(table_id = tcTable, column = 0, row = 0, text = '60' + '\n' + str.tostring(tf60MChg, '#.##') + '%', bgcolor=color.new(tf60MColor, tfTableOpacity), text_color=tf60MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 1, row = 0, text = 'D' + '\n' + str.tostring(tf1DChg, '#.##') + '%', bgcolor=color.new(tf1DColor, tfTableOpacity), text_color=tf1DTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 2, row = 0, text = 'W' + '\n' + str.tostring(tf1WChg, '#.##') + '%', bgcolor=color.new(tf1WColor, tfTableOpacity), text_color=tf1WTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 3, row = 0, text = 'M' + '\n' + str.tostring(tf1MChg, '#.##') + '%', bgcolor=color.new(tf1MColor, tfTableOpacity), text_color=tf1MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 4, row = 0, text = '3M' + '\n' + str.tostring(tf3MChg, '#.##') + '%', bgcolor=color.new(tf3MColor, tfTableOpacity), text_color=tf3MTextColor, text_size=size.auto, width=0)

            if showDTRAndATR
                table.cell(table_id = tcTable, column = 5, row = 0, text = 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

                table.cell(table_id = tcTable, column = 6, row = 0, text = 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)


    else if isDayValidTimeFrame
        if emptyTopTableRow
            var table tcTable = table.new(position=position.top_right, columns = 6, rows = 2, border_width=cellWidth)

            table.cell(table_id = tcTable, column = 0, row = 0, text = '')
            table.cell(table_id = tcTable, column = 0, row = 1, text = 'D' + '\n' + str.tostring(tf1DChg, '#.##') + '%', bgcolor=color.new(tf1DColor, tfTableOpacity), text_color=tf1DTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 1, row = 0, text = '')
            table.cell(table_id = tcTable, column = 1, row = 1, text = 'W' + '\n' + str.tostring(tf1WChg, '#.##') + '%', bgcolor=color.new(tf1WColor, tfTableOpacity), text_color=tf1WTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 2, row = 0, text = '')
            table.cell(table_id = tcTable, column = 2, row = 1, text = 'M' + '\n' + str.tostring(tf1MChg, '#.##') + '%', bgcolor=color.new(tf1MColor, tfTableOpacity), text_color=tf1MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 3, row = 0, text = '')
            table.cell(table_id = tcTable, column = 3, row = 1, text = '3M' + '\n' + str.tostring(tf3MChg, '#.##') + '%', bgcolor=color.new(tf3MColor, tfTableOpacity), text_color=tf3MTextColor, text_size=size.auto, width=0)

            if showDTRAndATR
                table.cell(table_id = tcTable, column = 4, row = 0, text = '')
                table.cell(table_id = tcTable, column = 4, row = 1, text = 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

                table.cell(table_id = tcTable, column = 5, row = 0, text = '')
                table.cell(table_id = tcTable, column = 5, row = 1, text = 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

        else
            var table tcTable = table.new(position=position.top_right, columns = 6, rows = 1, border_width=cellWidth)

            table.cell(table_id = tcTable, column = 0, row = 0, text = 'D' + '\n' + str.tostring(tf1DChg, '#.##') + '%', bgcolor=color.new(tf1DColor, tfTableOpacity), text_color=tf1DTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 1, row = 0, text = 'W' + '\n' + str.tostring(tf1WChg, '#.##') + '%', bgcolor=color.new(tf1WColor, tfTableOpacity), text_color=tf1WTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 2, row = 0, text = 'M' + '\n' + str.tostring(tf1MChg, '#.##') + '%', bgcolor=color.new(tf1MColor, tfTableOpacity), text_color=tf1MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 3, row = 0, text = '3M' + '\n' + str.tostring(tf3MChg, '#.##') + '%', bgcolor=color.new(tf3MColor, tfTableOpacity), text_color=tf3MTextColor, text_size=size.auto, width=0)

            if showDTRAndATR
                table.cell(table_id = tcTable, column = 4, row = 0, text = 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

                table.cell(table_id = tcTable, column = 5, row = 0, text = 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)


    else if isWeekValidTimeFrame
        if emptyTopTableRow
            var table tcTable = table.new(position=position.top_right, columns = 5, rows = 2, border_width=cellWidth)

            table.cell(table_id = tcTable, column = 0, row = 0, text = '')
            table.cell(table_id = tcTable, column = 0, row = 1, text = 'W' + '\n' + str.tostring(tf1WChg, '#.##') + '%', bgcolor=color.new(tf1WColor, tfTableOpacity), text_color=tf1WTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 1, row = 0, text = '')
            table.cell(table_id = tcTable, column = 1, row = 1, text = 'M' + '\n' + str.tostring(tf1MChg, '#.##') + '%', bgcolor=color.new(tf1MColor, tfTableOpacity), text_color=tf1MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 2, row = 0, text = '')
            table.cell(table_id = tcTable, column = 2, row = 1, text = '3M' + '\n' + str.tostring(tf3MChg, '#.##') + '%', bgcolor=color.new(tf3MColor, tfTableOpacity), text_color=tf3MTextColor, text_size=size.auto, width=0)

            if showDTRAndATR
                table.cell(table_id = tcTable, column = 3, row = 0, text = '')
                table.cell(table_id = tcTable, column = 3, row = 1, text = 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

                table.cell(table_id = tcTable, column = 4, row = 0, text = '')
                table.cell(table_id = tcTable, column = 4, row = 1, text = 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

        else
            var table tcTable = table.new(position=position.top_right, columns = 5, rows = 1, border_width=cellWidth)

            table.cell(table_id = tcTable, column = 0, row = 0, text = 'W' + '\n' + str.tostring(tf1WChg, '#.##') + '%', bgcolor=color.new(tf1WColor, tfTableOpacity), text_color=tf1WTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 1, row = 0, text = 'M' + '\n' + str.tostring(tf1MChg, '#.##') + '%', bgcolor=color.new(tf1MColor, tfTableOpacity), text_color=tf1MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 2, row = 0, text = '3M' + '\n' + str.tostring(tf3MChg, '#.##') + '%', bgcolor=color.new(tf3MColor, tfTableOpacity), text_color=tf3MTextColor, text_size=size.auto, width=0)

            if showDTRAndATR
                table.cell(table_id = tcTable, column = 3, row = 0, text = 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

                table.cell(table_id = tcTable, column = 4, row = 0, text = 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)


    else if isMonthValidTimeFrame
        if emptyTopTableRow
            var table tcTable = table.new(position=position.top_right, columns = 4, rows = 2, border_width=cellWidth)

            table.cell(table_id = tcTable, column = 0, row = 0, text = '')
            table.cell(table_id = tcTable, column = 0, row = 1, text = 'M' + '\n' + str.tostring(tf1MChg, '#.##') + '%', bgcolor=color.new(tf1MColor, tfTableOpacity), text_color=tf1MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 1, row = 0, text = '')
            table.cell(table_id = tcTable, column = 1, row = 1, text = '3M' + '\n' + str.tostring(tf3MChg, '#.##') + '%', bgcolor=color.new(tf3MColor, tfTableOpacity), text_color=tf3MTextColor, text_size=size.auto, width=0)

            if showDTRAndATR
                table.cell(table_id = tcTable, column = 2, row = 0, text = '')
                table.cell(table_id = tcTable, column = 2, row = 1, text = 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

                table.cell(table_id = tcTable, column = 3, row = 0, text = '')
                table.cell(table_id = tcTable, column = 3, row = 1, text = 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

        else
            var table tcTable = table.new(position=position.top_right, columns = 4, rows = 1, border_width=cellWidth)

            table.cell(table_id = tcTable, column = 0, row = 0, text = 'M' + '\n' + str.tostring(tf1MChg, '#.##') + '%', bgcolor=color.new(tf1MColor, tfTableOpacity), text_color=tf1MTextColor, text_size=size.auto, width=0)

            table.cell(table_id = tcTable, column = 1, row = 0, text = '3M' + '\n' + str.tostring(tf3MChg, '#.##') + '%', bgcolor=color.new(tf3MColor, tfTableOpacity), text_color=tf3MTextColor, text_size=size.auto, width=0)

            if showDTRAndATR
                table.cell(table_id = tcTable, column = 2, row = 0, text = 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

                table.cell(table_id = tcTable, column = 3, row = 0, text = 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

    else if isQuarterValidTimeFrame

        if emptyTopTableRow
            var table tcTable = table.new(position=position.top_right, columns = 2, rows = 2, border_width=cellWidth)

            if showDTRAndATR
                table.cell(table_id = tcTable, column = 0, row = 0, text = '')
                table.cell(table_id = tcTable, column = 0, row = 1, text = 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

                table.cell(table_id = tcTable, column = 1, row = 0, text = '')
                table.cell(table_id = tcTable, column = 1, row = 1, text = 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

        else
            var table tcTable = table.new(position=position.top_right, columns = 2, rows = 1, border_width=cellWidth)

            if showDTRAndATR
                table.cell(table_id = tcTable, column = 0, row = 0, text = 'DTR' + '\n' + str.tostring(cdayhigh - cdaylow, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

                table.cell(table_id = tcTable, column = 1, row = 0, text = 'ATR' + '\n' + str.tostring(dAtr, '#.##'), bgcolor=color.new(atrColor, tfTableOpacity), text_color=atrTextColor, text_size=size.auto, width=0)

